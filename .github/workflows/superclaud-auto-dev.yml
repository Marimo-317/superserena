name: SuperClaude Auto-Development Pipeline

# Comprehensive GitHub Actions workflow integrating Claude Code with SuperClaude framework
# Supports complete automation: Issue ‚Üí Implementation ‚Üí PR ‚Üí Testing

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: read
  id-token: write

on:
  # Issue-based triggers for requirement definition
  issues:
    types: [opened, labeled, assigned]
  
  # Comment-based triggers for @claude interactions
  issue_comment:
    types: [created, edited]
  
  # PR-based triggers for review and validation
  pull_request:
    types: [opened, synchronize, ready_for_review]
  pull_request_review_comment:
    types: [created]
  
  # Manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      mode:
        description: 'Execution mode'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - sparc-full
        - quality-focus
        - performance-focus

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Main SuperClaude processing job
  superclaud-processor:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'workflow_dispatch'
    
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g typescript ts-node jest

      - name: SuperClaude Main Processing
        uses: anthropics/claude-code-action@beta
        with:
          # OAuth authentication (Claude MAX subscription)
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Enhanced tool permissions for full automation
          allowed_tools: |
            Edit,MultiEdit,Glob,Grep,LS,Read,Write,
            mcp__github_comment__update_claude_comment,
            Bash(npm:*),Bash(node:*),Bash(npx:*),
            Bash(mkdir:*),Bash(touch:*),Bash(echo:*),Bash(cat:*),
            Bash(chmod:*),Bash(cp:*),Bash(mv:*),Bash(rm:*),
            Bash(git:*),Bash(gh:*),
            Bash(jest:*),Bash(eslint:*),Bash(tsc:*)
          
          # SuperClaude Framework Integration
          direct_prompt: |
            üöÄ SuperClaude Auto-Development Pipeline Activated
            
            ## Current Context
            - Repository: ${{ github.repository }}
            - Event: ${{ github.event_name }}
            - Trigger: ${{ github.event.action }}
            - Branch: ${{ github.ref_name }}
            
            ## SuperClaude Framework Commands Available
            Execute the following based on the trigger context:
            
            ### Issue Processing (Requirements Phase)
            If this is an issue-based trigger:
            1. /analyze --scope project --think-hard
            2. Apply SPARC Methodology for requirement analysis
            3. Use sparc-orchestrator for coordination
            4. Validate requirements with human if ambiguous
            5. Create implementation plan using TodoWrite
            
            ### Implementation Phase (Comment/PR) - ENHANCED
            If this is a comment or PR trigger:
            1. /implement [extracted-feature] --wave-mode --validate
            2. CREATE ACTUAL FILES using Write/Edit tools
            3. Install dependencies: Bash(npm install <packages>)
            4. Execute multi-agent coordination:
               - sparc-security-reviewer for security audit
               - sparc-performance for optimization
               - sparc-tdd for comprehensive testing
            5. Run tests: Bash(npm test)
            6. Run linting: Bash(npm run lint) or Bash(npx eslint)
            7. Commit changes: Bash(git add .) && Bash(git commit -m "message")
            8. Push to branch: Bash(git push origin <branch>)
            9. Create PR: Bash(gh pr create --title "..." --body "...")
            
            ### Quality Assurance Automation - ENHANCED
            MUST execute with actual tool commands:
            - TypeScript compilation: Bash(npx tsc --noEmit)
            - Linting: Bash(npx eslint src/ --ext .ts,.js)
            - Testing: Bash(npm test)
            - Security audit: Bash(npm audit)
            - Security review via sparc-security-reviewer
            - Performance optimization via sparc-performance  
            - Test coverage validation (>90% unit, >70% integration)
            - Code quality assessment via sparc-coder
            - Documentation generation if needed
            
            ### Integration Requirements  
            - Use Serena MCP for semantic analysis (80% token efficiency)
            - Apply Wave System for complex operations (complexity > 0.7)
            - Implement Memory persistence via .serena/memories/
            - Follow SOLID principles and clean code practices
            - Ensure production-ready code with proper error handling
            
            ### Output Requirements
            - Create comprehensive PR with detailed description
            - Include test results and coverage reports
            - Document all changes and architectural decisions
            - Provide deployment-ready code
            - Add appropriate labels and reviewers
            
            üéØ Execute based on current trigger and apply full SuperClaude capabilities!
          
          # Advanced configuration for enhanced automation
          max_turns: 100
          timeout_minutes: 90
          
      - name: Validate Build and Tests
        if: success()
        run: |
          # Run comprehensive validation
          npm run build || echo "No build script found"
          npm test || echo "No test script found"
          
          # TypeScript compilation check
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          fi
          
          # Linting validation
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npx eslint src/ --ext .ts,.js || echo "Linting completed with warnings"
          fi

      - name: Performance and Security Validation
        if: success()
        run: |
          # Security audit
          npm audit --audit-level=moderate || echo "Security audit completed"
          
          # Bundle size analysis (if applicable)
          if [ -f "webpack.config.js" ] || [ -f "vite.config.js" ]; then
            npm run analyze || echo "Bundle analysis not available"
          fi

      - name: Generate Integration Report
        if: always()
        run: |
          echo "## SuperClaude Integration Report" > integration-report.md
          echo "- **Timestamp**: $(date -u)" >> integration-report.md
          echo "- **Event**: ${{ github.event_name }}" >> integration-report.md
          echo "- **Repository**: ${{ github.repository }}" >> integration-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> integration-report.md
          echo "- **Workflow Status**: ${{ job.status }}" >> integration-report.md
          echo "- **SuperClaude Framework**: Active" >> integration-report.md
          
          # Add test results if available
          if [ -f "coverage/lcov-report/index.html" ]; then
            echo "- **Test Coverage**: Available in artifacts" >> integration-report.md
          fi

      - name: Upload Integration Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: superclaud-integration-${{ github.run_number }}
          path: |
            integration-report.md
            coverage/
            dist/
            *.log
          retention-days: 30

  # Specialized job for complex SPARC workflow execution
  sparc-workflow:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.mode == 'sparc-full'
    
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SPARC Full Methodology Execution
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          prompt: |
            üèóÔ∏è SPARC Full Methodology Execution
            
            Execute complete SPARC development lifecycle:
            
            ## Phase 1: Specification (S)
            - Analyze current project requirements
            - Define clear, testable acceptance criteria
            - Document functional and non-functional requirements
            - Validate business logic and constraints
            
            ## Phase 2: Pseudocode (P)  
            - Create high-level algorithmic design
            - Define component interfaces and contracts
            - Establish test-driven development anchors
            - Plan modular architecture approach
            
            ## Phase 3: Architecture (A)
            - Design scalable system architecture
            - Define security patterns and implementations
            - Plan performance optimization strategies
            - Establish deployment and infrastructure patterns
            
            ## Phase 4: Refinement (R)
            - Implement iterative improvement cycles
            - Apply code quality optimization
            - Execute comprehensive testing strategy
            - Validate security and performance benchmarks
            
            ## Phase 5: Completion (C)
            - Finalize production-ready implementation
            - Generate comprehensive documentation
            - Execute deployment readiness validation
            - Create maintenance and monitoring guidelines
            
            Use all SuperClaude specialists:
            - Tell sparc-orchestrator to coordinate phases
            - Use sparc-architect for system design
            - Use sparc-coder for implementation
            - Use sparc-security-reviewer for security validation
            - Use sparc-performance for optimization
            - Use sparc-tdd for testing strategy
            - Use sparc-devops for deployment readiness
            
            üìä Provide comprehensive report with metrics and deliverables