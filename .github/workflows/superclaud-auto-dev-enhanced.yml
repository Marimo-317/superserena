name: SuperClaude Auto-Development Pipeline (Enhanced)

# Enhanced version with extended permissions for full automation
# Supports complete automation: Issue → Implementation → PR → Testing → Merge

permissions:  
  contents: write           # Create, update, delete files
  pull-requests: write      # Create, update PRs
  issues: write            # Comment on issues
  checks: write            # Create status checks
  actions: read            # Read workflow information
  id-token: write          # OIDC token for authentication
  pages: write             # GitHub Pages (if needed)
  deployments: write       # Deployment status
  repository-projects: write # Project boards
  security-events: write   # Security alerts

on:
  # Issue-based triggers for requirement definition
  issues:
    types: [opened, labeled, assigned]
  
  # Comment-based triggers for @claude interactions
  issue_comment:
    types: [created, edited]
  
  # PR-based triggers for review and validation
  pull_request:
    types: [opened, synchronize, ready_for_review]
  pull_request_review_comment:
    types: [created]
  
  # Manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      mode:
        description: 'Execution mode'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - sparc-full
        - quality-focus
        - performance-focus

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Main SuperClaude processing job with enhanced permissions
  superclaud-processor:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'workflow_dispatch'
    
    timeout-minutes: 120  # Extended timeout for complex implementations
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # Grant elevated permissions to the runner
      - name: Setup enhanced permissions
        run: |
          # Ensure proper git configuration
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Set executable permissions for enhanced operations
          chmod +x /usr/bin/*
          
          echo "Enhanced permissions configured for full automation"

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g typescript ts-node jest eslint

      - name: SuperClaude Main Processing (Enhanced)
        uses: anthropics/claude-code-action@beta
        with:
          # OAuth authentication (Claude MAX subscription)
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Enhanced tool permissions
          allowed_tools: |
            Edit,MultiEdit,Glob,Grep,LS,Read,Write,
            mcp__github_comment__update_claude_comment,
            Bash(npm:*),Bash(node:*),Bash(npx:*),
            Bash(mkdir:*),Bash(touch:*),Bash(echo:*),Bash(cat:*),
            Bash(chmod:*),Bash(cp:*),Bash(mv:*),Bash(rm:*),
            Bash(git:*),Bash(gh:*),
            Bash(jest:*),Bash(eslint:*),Bash(tsc:*)
          
          # SuperClaude Framework Integration
          direct_prompt: |
            🚀 SuperClaude Auto-Development Pipeline Activated (Enhanced)
            
            ## Current Context
            - Repository: ${{ github.repository }}
            - Event: ${{ github.event_name }}
            - Trigger: ${{ github.event.action }}
            - Branch: ${{ github.ref_name }}
            
            ## Enhanced Capabilities Available
            You now have FULL development capabilities:
            
            ### File Operations
            - Create/edit/delete files: Write, Edit, MultiEdit tools
            - Directory operations: mkdir, touch, cp, mv, rm via Bash
            - Permission management: chmod via Bash
            
            ### Development Tools
            - Node.js operations: npm, node, npx via Bash
            - TypeScript: tsc compilation via Bash
            - Testing: jest execution via Bash
            - Linting: eslint execution via Bash
            - Package management: npm install, npm test, npm run via Bash
            
            ### Git Operations (Full Access)
            - All git commands: add, commit, push, branch, merge, etc.
            - GitHub CLI: gh commands for PR creation, issue management
            
            ## SuperClaude Framework Commands
            Execute based on trigger context:
            
            ### Issue Processing (Requirements Phase)
            If this is an issue-based trigger:
            1. /analyze --scope project --think-hard
            2. Apply SPARC Methodology for requirement analysis
            3. Use sparc-orchestrator for coordination
            4. Create implementation plan using TodoWrite
            
            ### Implementation Phase (Comment/PR)
            If this is a comment or PR trigger:
            1. /implement [extracted-feature] --wave-mode --validate
            2. Create actual files using Write/Edit tools
            3. Install dependencies: Bash(npm install <packages>)
            4. Run tests: Bash(npm test)
            5. Run linting: Bash(npm run lint) or Bash(npx eslint)
            6. Commit changes: Bash(git add .) && Bash(git commit -m "message")
            7. Push to branch: Bash(git push origin <branch>)
            8. Create PR: Bash(gh pr create --title "..." --body "...")
            
            ### Quality Assurance Automation
            MUST execute:
            - TypeScript compilation: Bash(npx tsc --noEmit)
            - Linting: Bash(npx eslint src/ --ext .ts,.js)
            - Testing: Bash(npm test)
            - Security audit: Bash(npm audit)
            - Performance validation: Custom benchmarks if applicable
            
            ### Integration Requirements  
            - Use Serena MCP for semantic analysis (80% token efficiency)
            - Apply Wave System for complex operations (complexity > 0.7)
            - Implement Memory persistence via .serena/memories/
            - Follow SOLID principles and clean code practices
            - Ensure production-ready code with proper error handling
            
            ### Output Requirements
            - Create comprehensive PR with detailed description
            - Include test results and coverage reports
            - Document all changes and architectural decisions
            - Provide deployment-ready code
            - Add appropriate labels and reviewers
            
            🎯 Execute full development lifecycle with REAL file creation and testing!
          
          # Extended configuration for complex operations
          max_turns: 100
          timeout_minutes: 90
          
      - name: Validate Implementation Results
        if: success()
        run: |
          echo "## Implementation Validation" > validation-report.md
          echo "- Timestamp: $(date -u)" >> validation-report.md
          
          # Check if new files were created
          if git diff --name-only HEAD~1 HEAD | grep -q "src/\|tests/"; then
            echo "- New implementation files: CREATED ✅" >> validation-report.md
            git diff --name-only HEAD~1 HEAD | grep -E "src/|tests/" >> validation-report.md
          else
            echo "- New implementation files: NOT FOUND ❌" >> validation-report.md
          fi
          
          # Check if tests pass
          if npm test 2>/dev/null; then
            echo "- Test execution: PASSED ✅" >> validation-report.md
          else
            echo "- Test execution: FAILED ❌" >> validation-report.md
          fi
          
          # Check if linting passes
          if npm run lint 2>/dev/null; then
            echo "- Code linting: PASSED ✅" >> validation-report.md
          else
            echo "- Code linting: ISSUES FOUND ⚠️" >> validation-report.md
          fi
          
          cat validation-report.md

      - name: Upload Implementation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: superclaud-implementation-${{ github.run_number }}
          path: |
            validation-report.md
            src/
            tests/
            *.log
          retention-days: 30